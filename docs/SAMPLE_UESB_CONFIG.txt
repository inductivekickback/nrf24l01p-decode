// NOTE: The device appears to be a Nordic clone (e.g. Beken BK2423).
const uint8_t rx_addr_p0[]                 = {0x1C,0xDF,0x02,0x00,0xA2}; // Using TX_ADDR because mode is PTX.
const uint8_t rx_addr_p1[]                 = {0xC2,0xC2,0xC2,0xC2,0xC2};
uint32_t      uesb_err;                    

uesb_config_t uesb_config                  = UESB_DEFAULT_CONFIG;
uesb_config.rf_channel                     = 30;
uesb_config.crc                            = UESB_CRC_16BIT;
uesb_config.payload_length                 = 10;
uesb_config.protocol                       = UESB_PROTOCOL_SB;
uesb_config.bitrate                        = UESB_BITRATE_250KBPS;
uesb_config.mode                           = UESB_MODE_PTX;
uesb_config.rf_addr_length                 = 5;
uesb_config.tx_output_power                = UESB_TX_POWER_0DBM;
uesb_config.rx_address_p2                  = 0xC3;
uesb_config.rx_address_p3                  = 0xC4;
uesb_config.rx_address_p4                  = 0xC5;
uesb_config.rx_address_p5                  = 0xC6;
uesb_config.dynamic_ack_enabled            = 0;
uesb_config.dynamic_payload_length_enabled = 0; // Used in PRX mode
uesb_config.rx_pipes_enabled               = 0x3F;
uesb_config.retransmit_delay               = 3750;
uesb_config.retransmit_count               = 15;
uesb_config.event_handler                  = 0; // TODO: Set event handler

uesb_err = uesb_init(&uesb_config);
if (UESB_SUCCESS != uesb_err)
{
    // TODO: Handle the error.
}

uesb_err = uesb_set_address(UESB_ADDRESS_PIPE0, &rx_addr_p0[0]);
if (UESB_SUCCESS != uesb_err)
{
    // TODO: Handle the error.
}

uesb_err = uesb_set_address(UESB_ADDRESS_PIPE1, &rx_addr_p1[0]);
if (UESB_SUCCESS != uesb_err)
{
    // TODO: Handle the error.
}
